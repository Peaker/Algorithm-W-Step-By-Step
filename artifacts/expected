Expression types:
(\id -> id) (\x -> x) :: forall a1. a1 -> a1
((\id -> id{3}){2} (\x -> x{5}){4}){1}
    1 = a1 -> a1
    2 = (a1 -> a1) -> a1 -> a1
    3 = a1 -> a1
    4 = a1 -> a1
    5 = a1
(\id -> id id) (\x -> x)
Occurs check fails: a0 vs. a0 -> a1
(\id -> id id) (\x -> (\y -> y) x)
Occurs check fails: a0 vs. a0 -> a1
(\id -> id id 2) (\x -> (\y -> y) x)
Occurs check fails: a0 vs. a0 -> a1
(\id -> id) (\x -> x x)
Occurs check fails: a1 vs. a1 -> a2
\m -> (\y -> (\x -> x) (y 3)) m :: forall a5. (Int -> a5) -> a5
(\m -> ((\y -> ((\x -> x{6}){5} (y{8} 3{9}){7}){4}){3} m{10}){2}){1}
    1 = (Int -> a5) -> a5
    2 = a5
    3 = (Int -> a5) -> a5
    4 = a5
    5 = a5 -> a5
    6 = a5
    7 = a5
    8 = Int -> a5
    9 = Int
    10 = Int -> a5
2 2
Types do not unify Int vs. Int -> a0
\a -> (\x -> x 3) (\b -> (\y -> y 2) (\c -> a 1)) :: forall a9. (Int -> a9) -> a9
(\a -> ((\x -> (x{5} 3{6}){4}){3} (\b -> ((\y -> (y{11} 2{12}){10}){9} (\c -> (a{15} 1{16}){14}){13}){8}){7}){2}){1}
    1 = (Int -> a9) -> a9
    2 = a9
    3 = (Int -> a9) -> a9
    4 = a9
    5 = Int -> a9
    6 = Int
    7 = Int -> a9
    8 = a9
    9 = (Int -> a9) -> a9
    10 = a9
    11 = Int -> a9
    12 = Int
    13 = Int -> a9
    14 = a9
    15 = Int -> a9
    16 = Int
\a -> \b -> b (a (a b))
Occurs check fails: a3 vs. a3 -> a4
\vec -> { newX = vec.x, { newY = vec.y, {} } } :: forall a1 a3 r5. {{x y} ∉ r5}[NoConstraints] => *{ x : a1, y : a3, r5... } -> *{ newX : a1, newY : a3 }
(\vec -> { newX = (vec{4}.x){3}, { newY = (vec{7}.y){6}, {}{8} }{5} }{2}){1}
    1 = *{ x : a1, y : a3, r5... } -> *{ newX : a1, newY : a3 }
    2 = *{ newX : a1, newY : a3 }
    3 = a1
    4 = *{ x : a1, y : a3, r5... }
    5 = *{ newY : a3 }
    6 = a3
    7 = *{ x : a1, y : a3, r5... }
    8 = *{}
(\vec -> vec.x) { x = 5, { y = 7, {} } } :: Int
((\vec -> (vec{4}.x){3}){2} { x = 5{6}, { y = 7{8}, {}{9} }{7} }{5}){1}
    1 = Int
    2 = *{ x : Int, y : Int } -> Int
    3 = Int
    4 = *{ x : Int, y : Int }
    5 = *{ x : Int, y : Int }
    6 = Int
    7 = *{ y : Int }
    8 = Int
    9 = *{}
(\vec -> vec.z) { x = 5, { y = 7, {} } }
Types do not unify { z : a1, r2... } vs. { x : Int, y : Int }
\x -> { prev = x.cur, x } :: forall a1 r2. {{cur prev} ∉ r2}[NoConstraints] => *{ cur : a1, r2... } -> *{ prev : a1, cur : a1, r2... }
(\x -> { prev = (x{4}.cur){3}, x{5} }{2}){1}
    1 = *{ cur : a1, r2... } -> *{ prev : a1, cur : a1, r2... }
    2 = *{ prev : a1, cur : a1, r2... }
    3 = a1
    4 = *{ cur : a1, r2... }
    5 = *{ cur : a1, r2... }
{ x = 2, { x = 3, {} } }
Added field x but already in record { x : Int }
(\r -> { x = 2, r }) { x = 3, {} }
Field x forbidden in var r1 from record { x : Int }
(\f -> f { x = 2, {} }) (\r -> { x = 3, r })
Field x forbidden in var r3 from record { x : Int }
{ x = 1, ? } :: forall r1. {{x} ∉ r1}[NoConstraints] => *{ x : Int, r1... }
{ x = 1{2}, ?{3} }{1}
    1 = *{ x : Int, r1... }
    2 = Int
    3 = *{ r1... }
\x -> : { head = x, { tail = : { head = x, { tail = [], {} } }, {} } } :: forall i3. i3 -> List<elem = i3>
(\x -> (:{3} { head = x{5}, { tail = (:{8} { head = x{10}, { tail = []{12}, {}{13} }{11} }{9}){7}, {}{14} }{6} }{4}){2}){1}
    1 = i3 -> List<elem = i3>
    2 = List<elem = i3>
    3 = *{ head : i3, tail : List<elem = i3> } -> List<elem = i3>
    4 = *{ head : i3, tail : List<elem = i3> }
    5 = i3
    6 = *{ tail : List<elem = i3> }
    7 = List<elem = i3>
    8 = *{ head : i3, tail : List<elem = i3> } -> List<elem = i3>
    9 = *{ head : i3, tail : List<elem = i3> }
    10 = i3
    11 = *{ tail : List<elem = i3> }
    12 = List<elem = i3>
    13 = *{}
    14 = *{}
fix (\loop -> \x -> if { condition = == { l = x, { r = 0, {} } }, { then = 1, { else = * { l = x, { r = loop (- { l = x, { r = 1, {} } }), {} } }, {} } } }) :: Int -> Int
(fix{2} (\loop -> (\x -> (if{6} { condition = (=={9} { l = x{11}, { r = 0{13}, {}{14} }{12} }{10}){8}, { then = 1{16}, { else = (*{19} { l = x{21}, { r = (loop{24} (-{26} { l = x{28}, { r = 1{30}, {}{31} }{29} }{27}){25}){23}, {}{32} }{22} }{20}){18}, {}{33} }{17} }{15} }{7}){5}){4}){3}){1}
    1 = Int -> Int
    2 = ((Int -> Int) -> Int -> Int) -> Int -> Int
    3 = (Int -> Int) -> Int -> Int
    4 = Int -> Int
    5 = Int
    6 = *{ condition : Bool, then : Int, else : Int } -> Int
    7 = *{ condition : Bool, then : Int, else : Int }
    8 = Bool
    9 = *{ l : Int, r : Int } -> Bool
    10 = *{ l : Int, r : Int }
    11 = Int
    12 = *{ r : Int }
    13 = Int
    14 = *{}
    15 = *{ then : Int, else : Int }
    16 = Int
    17 = *{ else : Int }
    18 = Int
    19 = *{ l : Int, r : Int } -> Int
    20 = *{ l : Int, r : Int }
    21 = Int
    22 = *{ r : Int }
    23 = Int
    24 = Int -> Int
    25 = Int
    26 = *{ l : Int, r : Int } -> Int
    27 = *{ l : Int, r : Int }
    28 = Int
    29 = *{ r : Int }
    30 = Int
    31 = *{}
    32 = *{}
    33 = *{}
sum (filter { from = .. { l = 1, { r = 1000, {} } }, { predicate = \x -> || { l = == { l = 0, { r = % { l = x, { r = 3, {} } }, {} } }, { r = == { l = 0, { r = % { l = x, { r = 5, {} } }, {} } }, {} } }, {} } }) :: Int
(sum{2} (filter{4} { from = (..{7} { l = 1{9}, { r = 1000{11}, {}{12} }{10} }{8}){6}, { predicate = (\x -> (||{16} { l = (=={19} { l = 0{21}, { r = (%{24} { l = x{26}, { r = 3{28}, {}{29} }{27} }{25}){23}, {}{30} }{22} }{20}){18}, { r = (=={33} { l = 0{35}, { r = (%{38} { l = x{40}, { r = 5{42}, {}{43} }{41} }{39}){37}, {}{44} }{36} }{34}){32}, {}{45} }{31} }{17}){15}){14}, {}{46} }{13} }{5}){3}){1}
    1 = Int
    2 = List<elem = Int> -> Int
    3 = List<elem = Int>
    4 = *{ from : List<elem = Int>, predicate : Int -> Bool } -> List<elem = Int>
    5 = *{ from : List<elem = Int>, predicate : Int -> Bool }
    6 = List<elem = Int>
    7 = *{ l : Int, r : Int } -> List<elem = Int>
    8 = *{ l : Int, r : Int }
    9 = Int
    10 = *{ r : Int }
    11 = Int
    12 = *{}
    13 = *{ predicate : Int -> Bool }
    14 = Int -> Bool
    15 = Bool
    16 = *{ l : Bool, r : Bool } -> Bool
    17 = *{ l : Bool, r : Bool }
    18 = Bool
    19 = *{ l : Int, r : Int } -> Bool
    20 = *{ l : Int, r : Int }
    21 = Int
    22 = *{ r : Int }
    23 = Int
    24 = *{ l : Int, r : Int } -> Int
    25 = *{ l : Int, r : Int }
    26 = Int
    27 = *{ r : Int }
    28 = Int
    29 = *{}
    30 = *{}
    31 = *{ r : Bool }
    32 = Bool
    33 = *{ l : Int, r : Int } -> Bool
    34 = *{ l : Int, r : Int }
    35 = Int
    36 = *{ r : Int }
    37 = Int
    38 = *{ l : Int, r : Int } -> Int
    39 = *{ l : Int, r : Int }
    40 = Int
    41 = *{ r : Int }
    42 = Int
    43 = *{}
    44 = *{}
    45 = *{}
    46 = *{}
\paramsRecord -> (\solvePoly -> (\sqrts -> if { condition = == { l = paramsRecord.d, { r = 0, {} } }, { then = concat (map { list = solvePoly (: { head = paramsRecord.e, { tail = : { head = paramsRecord.c, { tail = : { head = 1, { tail = [], {} } }, {} } }, {} } }), { mapping = sqrts, {} } }), { else = concat (map { list = sqrts (head (solvePoly (: { head = negate (* { l = paramsRecord.d, { r = paramsRecord.d, {} } }), { tail = : { head = - { l = * { l = paramsRecord.c, { r = paramsRecord.c, {} } }, { r = * { l = 4, { r = paramsRecord.e, {} } }, {} } }, { tail = : { head = * { l = 2, { r = paramsRecord.c, {} } }, { tail = : { head = 1, { tail = [], {} } }, {} } }, {} } }, {} } }))), { mapping = \x -> solvePoly (: { head = - { l = + { l = paramsRecord.c, { r = * { l = x, { r = x, {} } }, {} } }, { r = / { l = paramsRecord.d, { r = x, {} } }, {} } }, { tail = : { head = * { l = 2, { r = x, {} } }, { tail = : { head = 2, { tail = [], {} } }, {} } }, {} } }), {} } }), {} } } }) (\x -> (\r -> : { head = r, { tail = : { head = negate r, { tail = [], {} } }, {} } }) (sqrt x))) id :: forall r77. {{c d e} ∉ r77}[NoConstraints] => *{ d : Int, e : Int, c : Int, r77... } -> List<elem = Int>
(\paramsRecord -> ((\solvePoly -> ((\sqrts -> (if{7} { condition = (=={10} { l = (paramsRecord{13}.d){12}, { r = 0{15}, {}{16} }{14} }{11}){9}, { then = (concat{19} (map{21} { list = (solvePoly{24} (:{26} { head = (paramsRecord{29}.e){28}, { tail = (:{32} { head = (paramsRecord{35}.c){34}, { tail = (:{38} { head = 1{40}, { tail = []{42}, {}{43} }{41} }{39}){37}, {}{44} }{36} }{33}){31}, {}{45} }{30} }{27}){25}){23}, { mapping = sqrts{47}, {}{48} }{46} }{22}){20}){18}, { else = (concat{51} (map{53} { list = (sqrts{56} (head{58} (solvePoly{60} (:{62} { head = (negate{65} (*{67} { l = (paramsRecord{70}.d){69}, { r = (paramsRecord{73}.d){72}, {}{74} }{71} }{68}){66}){64}, { tail = (:{77} { head = (-{80} { l = (*{83} { l = (paramsRecord{86}.c){85}, { r = (paramsRecord{89}.c){88}, {}{90} }{87} }{84}){82}, { r = (*{93} { l = 4{95}, { r = (paramsRecord{98}.e){97}, {}{99} }{96} }{94}){92}, {}{100} }{91} }{81}){79}, { tail = (:{103} { head = (*{106} { l = 2{108}, { r = (paramsRecord{111}.c){110}, {}{112} }{109} }{107}){105}, { tail = (:{115} { head = 1{117}, { tail = []{119}, {}{120} }{118} }{116}){114}, {}{121} }{113} }{104}){102}, {}{122} }{101} }{78}){76}, {}{123} }{75} }{63}){61}){59}){57}){55}, { mapping = (\x -> (solvePoly{127} (:{129} { head = (-{132} { l = (+{135} { l = (paramsRecord{138}.c){137}, { r = (*{141} { l = x{143}, { r = x{145}, {}{146} }{144} }{142}){140}, {}{147} }{139} }{136}){134}, { r = (/{150} { l = (paramsRecord{153}.d){152}, { r = x{155}, {}{156} }{154} }{151}){149}, {}{157} }{148} }{133}){131}, { tail = (:{160} { head = (*{163} { l = 2{165}, { r = x{167}, {}{168} }{166} }{164}){162}, { tail = (:{171} { head = 2{173}, { tail = []{175}, {}{176} }{174} }{172}){170}, {}{177} }{169} }{161}){159}, {}{178} }{158} }{130}){128}){126}){125}, {}{179} }{124} }{54}){52}){50}, {}{180} }{49} }{17} }{8}){6}){5} (\x -> ((\r -> (:{185} { head = r{187}, { tail = (:{190} { head = (negate{193} r{194}){192}, { tail = []{196}, {}{197} }{195} }{191}){189}, {}{198} }{188} }{186}){184}){183} (sqrt{200} x{201}){199}){182}){181}){4}){3} id{202}){2}){1}
    1 = *{ d : Int, e : Int, c : Int, r77... } -> List<elem = Int>
    2 = List<elem = Int>
    3 = (List<elem = Int> -> List<elem = Int>) -> List<elem = Int>
    4 = List<elem = Int>
    5 = (Int -> List<elem = Int>) -> List<elem = Int>
    6 = List<elem = Int>
    7 = *{ condition : Bool, then : List<elem = Int>, else : List<elem = Int> } -> List<elem = Int>
    8 = *{ condition : Bool, then : List<elem = Int>, else : List<elem = Int> }
    9 = Bool
    10 = *{ l : Int, r : Int } -> Bool
    11 = *{ l : Int, r : Int }
    12 = Int
    13 = *{ d : Int, e : Int, c : Int, r77... }
    14 = *{ r : Int }
    15 = Int
    16 = *{}
    17 = *{ then : List<elem = Int>, else : List<elem = Int> }
    18 = List<elem = Int>
    19 = List<elem = List<elem = Int>> -> List<elem = Int>
    20 = List<elem = List<elem = Int>>
    21 = *{ list : List<elem = Int>, mapping : Int -> List<elem = Int> } -> List<elem = List<elem = Int>>
    22 = *{ list : List<elem = Int>, mapping : Int -> List<elem = Int> }
    23 = List<elem = Int>
    24 = List<elem = Int> -> List<elem = Int>
    25 = List<elem = Int>
    26 = *{ head : Int, tail : List<elem = Int> } -> List<elem = Int>
    27 = *{ head : Int, tail : List<elem = Int> }
    28 = Int
    29 = *{ d : Int, e : Int, c : Int, r77... }
    30 = *{ tail : List<elem = Int> }
    31 = List<elem = Int>
    32 = *{ head : Int, tail : List<elem = Int> } -> List<elem = Int>
    33 = *{ head : Int, tail : List<elem = Int> }
    34 = Int
    35 = *{ d : Int, e : Int, c : Int, r77... }
    36 = *{ tail : List<elem = Int> }
    37 = List<elem = Int>
    38 = *{ head : Int, tail : List<elem = Int> } -> List<elem = Int>
    39 = *{ head : Int, tail : List<elem = Int> }
    40 = Int
    41 = *{ tail : List<elem = Int> }
    42 = List<elem = Int>
    43 = *{}
    44 = *{}
    45 = *{}
    46 = *{ mapping : Int -> List<elem = Int> }
    47 = Int -> List<elem = Int>
    48 = *{}
    49 = *{ else : List<elem = Int> }
    50 = List<elem = Int>
    51 = List<elem = List<elem = Int>> -> List<elem = Int>
    52 = List<elem = List<elem = Int>>
    53 = *{ list : List<elem = Int>, mapping : Int -> List<elem = Int> } -> List<elem = List<elem = Int>>
    54 = *{ list : List<elem = Int>, mapping : Int -> List<elem = Int> }
    55 = List<elem = Int>
    56 = Int -> List<elem = Int>
    57 = Int
    58 = List<elem = Int> -> Int
    59 = List<elem = Int>
    60 = List<elem = Int> -> List<elem = Int>
    61 = List<elem = Int>
    62 = *{ head : Int, tail : List<elem = Int> } -> List<elem = Int>
    63 = *{ head : Int, tail : List<elem = Int> }
    64 = Int
    65 = Int -> Int
    66 = Int
    67 = *{ l : Int, r : Int } -> Int
    68 = *{ l : Int, r : Int }
    69 = Int
    70 = *{ d : Int, e : Int, c : Int, r77... }
    71 = *{ r : Int }
    72 = Int
    73 = *{ d : Int, e : Int, c : Int, r77... }
    74 = *{}
    75 = *{ tail : List<elem = Int> }
    76 = List<elem = Int>
    77 = *{ head : Int, tail : List<elem = Int> } -> List<elem = Int>
    78 = *{ head : Int, tail : List<elem = Int> }
    79 = Int
    80 = *{ l : Int, r : Int } -> Int
    81 = *{ l : Int, r : Int }
    82 = Int
    83 = *{ l : Int, r : Int } -> Int
    84 = *{ l : Int, r : Int }
    85 = Int
    86 = *{ d : Int, e : Int, c : Int, r77... }
    87 = *{ r : Int }
    88 = Int
    89 = *{ d : Int, e : Int, c : Int, r77... }
    90 = *{}
    91 = *{ r : Int }
    92 = Int
    93 = *{ l : Int, r : Int } -> Int
    94 = *{ l : Int, r : Int }
    95 = Int
    96 = *{ r : Int }
    97 = Int
    98 = *{ d : Int, e : Int, c : Int, r77... }
    99 = *{}
    100 = *{}
    101 = *{ tail : List<elem = Int> }
    102 = List<elem = Int>
    103 = *{ head : Int, tail : List<elem = Int> } -> List<elem = Int>
    104 = *{ head : Int, tail : List<elem = Int> }
    105 = Int
    106 = *{ l : Int, r : Int } -> Int
    107 = *{ l : Int, r : Int }
    108 = Int
    109 = *{ r : Int }
    110 = Int
    111 = *{ d : Int, e : Int, c : Int, r77... }
    112 = *{}
    113 = *{ tail : List<elem = Int> }
    114 = List<elem = Int>
    115 = *{ head : Int, tail : List<elem = Int> } -> List<elem = Int>
    116 = *{ head : Int, tail : List<elem = Int> }
    117 = Int
    118 = *{ tail : List<elem = Int> }
    119 = List<elem = Int>
    120 = *{}
    121 = *{}
    122 = *{}
    123 = *{}
    124 = *{ mapping : Int -> List<elem = Int> }
    125 = Int -> List<elem = Int>
    126 = List<elem = Int>
    127 = List<elem = Int> -> List<elem = Int>
    128 = List<elem = Int>
    129 = *{ head : Int, tail : List<elem = Int> } -> List<elem = Int>
    130 = *{ head : Int, tail : List<elem = Int> }
    131 = Int
    132 = *{ l : Int, r : Int } -> Int
    133 = *{ l : Int, r : Int }
    134 = Int
    135 = *{ l : Int, r : Int } -> Int
    136 = *{ l : Int, r : Int }
    137 = Int
    138 = *{ d : Int, e : Int, c : Int, r77... }
    139 = *{ r : Int }
    140 = Int
    141 = *{ l : Int, r : Int } -> Int
    142 = *{ l : Int, r : Int }
    143 = Int
    144 = *{ r : Int }
    145 = Int
    146 = *{}
    147 = *{}
    148 = *{ r : Int }
    149 = Int
    150 = *{ l : Int, r : Int } -> Int
    151 = *{ l : Int, r : Int }
    152 = Int
    153 = *{ d : Int, e : Int, c : Int, r77... }
    154 = *{ r : Int }
    155 = Int
    156 = *{}
    157 = *{}
    158 = *{ tail : List<elem = Int> }
    159 = List<elem = Int>
    160 = *{ head : Int, tail : List<elem = Int> } -> List<elem = Int>
    161 = *{ head : Int, tail : List<elem = Int> }
    162 = Int
    163 = *{ l : Int, r : Int } -> Int
    164 = *{ l : Int, r : Int }
    165 = Int
    166 = *{ r : Int }
    167 = Int
    168 = *{}
    169 = *{ tail : List<elem = Int> }
    170 = List<elem = Int>
    171 = *{ head : Int, tail : List<elem = Int> } -> List<elem = Int>
    172 = *{ head : Int, tail : List<elem = Int> }
    173 = Int
    174 = *{ tail : List<elem = Int> }
    175 = List<elem = Int>
    176 = *{}
    177 = *{}
    178 = *{}
    179 = *{}
    180 = *{}
    181 = Int -> List<elem = Int>
    182 = List<elem = Int>
    183 = Int -> List<elem = Int>
    184 = List<elem = Int>
    185 = *{ head : Int, tail : List<elem = Int> } -> List<elem = Int>
    186 = *{ head : Int, tail : List<elem = Int> }
    187 = Int
    188 = *{ tail : List<elem = Int> }
    189 = List<elem = Int>
    190 = *{ head : Int, tail : List<elem = Int> } -> List<elem = Int>
    191 = *{ head : Int, tail : List<elem = Int> }
    192 = Int
    193 = Int -> Int
    194 = Int
    195 = *{ tail : List<elem = Int> }
    196 = List<elem = Int>
    197 = *{}
    198 = *{}
    199 = Int
    200 = Int -> Int
    201 = Int
    202 = List<elem = Int> -> List<elem = Int>
(\open -> open { x = 0, {} }) (\x -> (\y -> x) x.x) :: *{ x : Int }
((\open -> (open{4} { x = 0{6}, {}{7} }{5}){3}){2} (\x -> ((\y -> x{11}){10} (x{13}.x){12}){9}){8}){1}
    1 = *{ x : Int }
    2 = (*{ x : Int } -> *{ x : Int }) -> *{ x : Int }
    3 = *{ x : Int }
    4 = *{ x : Int } -> *{ x : Int }
    5 = *{ x : Int }
    6 = Int
    7 = *{}
    8 = *{ x : Int } -> *{ x : Int }
    9 = *{ x : Int }
    10 = Int -> *{ x : Int }
    11 = *{ x : Int }
    12 = Int
    13 = *{ x : Int }
fix (\f -> ? (f (f (zipWith ? ? ?)))) :: forall i5. List<elem = i5> -> List<elem = i5>
(fix{2} (\f -> (?{5} (f{7} (f{9} (((zipWith{13} ?{14}){12} ?{15}){11} ?{16}){10}){8}){6}){4}){3}){1}
    1 = List<elem = i5> -> List<elem = i5>
    2 = ((List<elem = i5> -> List<elem = i5>) -> List<elem = i5> -> List<elem = i5>) -> List<elem = i5> -> List<elem = i5>
    3 = (List<elem = i5> -> List<elem = i5>) -> List<elem = i5> -> List<elem = i5>
    4 = List<elem = i5> -> List<elem = i5>
    5 = List<elem = i5> -> List<elem = i5> -> List<elem = i5>
    6 = List<elem = i5>
    7 = List<elem = i5> -> List<elem = i5>
    8 = List<elem = i5>
    9 = List<elem = i5> -> List<elem = i5>
    10 = List<elem = i5>
    11 = List<elem = i4> -> List<elem = i5>
    12 = List<elem = i3> -> List<elem = i4> -> List<elem = i5>
    13 = (i3 -> i4 -> i5) -> List<elem = i3> -> List<elem = i4> -> List<elem = i5>
    14 = i3 -> i4 -> i5
    15 = List<elem = i3>
    16 = List<elem = i4>
: { head = x{1}, { tail = : { head = y{2}, { tail = : { head = x{?}, { tail = [], {} } }, {} } }, {} } } :: forall r12. {NoConstraints}[{x y} ∉ r12] => List<elem = +{ x : Int, y : Int, r12... }>
(:{2} { head = (x{1{5}}){4}, { tail = (:{8} { head = (y{2{11}}){10}, { tail = (:{14} { head = (x{?{17}}){16}, { tail = []{19}, {}{20} }{18} }{15}){13}, {}{21} }{12} }{9}){7}, {}{22} }{6} }{3}){1}
    1 = List<elem = +{ x : Int, y : Int, r12... }>
    2 = *{ head : +{ x : Int, y : Int, r12... }, tail : List<elem = +{ x : Int, y : Int, r12... }> } -> List<elem = +{ x : Int, y : Int, r12... }>
    3 = *{ head : +{ x : Int, y : Int, r12... }, tail : List<elem = +{ y : Int, x : Int, r12... }> }
    4 = +{ x : Int, y : Int, r12... }
    5 = Int
    6 = *{ tail : List<elem = +{ y : Int, x : Int, r12... }> }
    7 = List<elem = +{ y : Int, x : Int, r12... }>
    8 = *{ head : +{ y : Int, x : Int, r12... }, tail : List<elem = +{ y : Int, x : Int, r12... }> } -> List<elem = +{ y : Int, x : Int, r12... }>
    9 = *{ head : +{ y : Int, x : Int, r12... }, tail : List<elem = +{ x : Int, y : Int, r12... }> }
    10 = +{ y : Int, x : Int, r12... }
    11 = Int
    12 = *{ tail : List<elem = +{ x : Int, y : Int, r12... }> }
    13 = List<elem = +{ x : Int, y : Int, r12... }>
    14 = *{ head : +{ x : Int, y : Int, r12... }, tail : List<elem = +{ x : Int, y : Int, r12... }> } -> List<elem = +{ x : Int, y : Int, r12... }>
    15 = *{ head : +{ x : Int, y : Int, r12... }, tail : List<elem = +{ x : Int, y : Int, r12... }> }
    16 = +{ x : Int, y : Int, r12... }
    17 = Int
    18 = *{ tail : List<elem = +{ x : Int, y : Int, r12... }> }
    19 = List<elem = +{ x : Int, y : Int, r12... }>
    20 = *{}
    21 = *{}
    22 = *{}
absurd :: forall a0. +{} -> a0
absurd{1}
    1 = +{} -> a0
\nothing -> \just -> case of
                     Nothing -> \_ -> nothing
                     _ -> case of
                          Just -> just
                          _ -> absurd :: forall a4 a7 res8. res8 -> (a4 -> res8) -> +{ Nothing : a7, Just : a4 } -> res8
(\nothing -> (\just -> (case of
                        Nothing -> (\_ -> nothing{5}){4}
                        _ -> (case of
                              Just -> just{7}
                              _ -> absurd{8}){6}){3}){2}){1}
    1 = res8 -> (a4 -> res8) -> +{ Nothing : a7, Just : a4 } -> res8
    2 = (a4 -> res8) -> +{ Nothing : a7, Just : a4 } -> res8
    3 = +{ Nothing : a7, Just : a4 } -> res8
    4 = a7 -> res8
    5 = res8
    6 = +{ Just : a4 } -> res8
    7 = a4 -> res8
    8 = +{} -> res8
{ a = maybe 0 plus1 (Just 1), { b = maybe 0 plus1 Nothing, {} } } :: *{ a : Int, b : Int }
{ a = (((maybe{5} 0{6}){4} plus1{7}){3} (Just{9} 1{10}){8}){2}, { b = (((maybe{15} 0{16}){14} plus1{17}){13} Nothing{18}){12}, {}{19} }{11} }{1}
    1 = *{ a : Int, b : Int }
    2 = Int
    3 = +{ Nothing : *{}, Just : Int } -> Int
    4 = (Int -> Int) -> +{ Nothing : *{}, Just : Int } -> Int
    5 = Int -> (Int -> Int) -> +{ Nothing : *{}, Just : Int } -> Int
    6 = Int
    7 = Int -> Int
    8 = +{ Nothing : *{}, Just : Int }
    9 = Int -> +{ Nothing : *{}, Just : Int }
    10 = Int
    11 = *{ b : Int }
    12 = Int
    13 = +{ Nothing : *{}, Just : Int } -> Int
    14 = (Int -> Int) -> +{ Nothing : *{}, Just : Int } -> Int
    15 = Int -> (Int -> Int) -> +{ Nothing : *{}, Just : Int } -> Int
    16 = Int
    17 = Int -> Int
    18 = +{ Nothing : *{}, Just : Int }
    19 = *{}
Recursive expression types:
(\id -> id) (\x -> x) :: forall a2. a2 -> a2
((\id -> id{3}){2} (\x -> x{5}){4}){1}
    1 = a2 -> a2
    2 = (a2 -> a2) -> a2 -> a2
    3 = a2 -> a2
    4 = a2 -> a2
    5 = a2
Recurse :: forall recurse0. recurse0
Recurse{1}
    1 = recurse0
Suggested values from types:
\x0 -> ? suggested by Int -> Int
\x0 -> \x1 -> ? suggested by Int -> Int -> Int
{} suggested by *{}
\x0 -> {} suggested by a -> *{}
\x0 -> { x = ?, { y = \x1 -> ?, {} } } suggested by a -> *{ x : Int, y : Int -> Int }
\x0 -> { x = \x1 -> ?, { y = \x2 -> ?, {} } } suggested by a -> *{ x : Int -> Int, y : Int -> Int }
Unify:
*{ z : b, x : c, y : d } -> e = *{ x : Int, y : a, z : a, r... } -> a :
*{ z : a, x : Int, y : a } -> a
